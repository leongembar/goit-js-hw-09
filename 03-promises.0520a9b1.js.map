{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,WAAWC,SAASC,cAAc,uBAClCC,UAAUF,SAASC,cAAc,sBACjCE,OAAOH,SAASC,cAAc,wBAC9BG,SAASJ,SAASC,cAAc,UAChCI,KAAKL,SAASC,cAAc,UAG9BH,EAAKO,KAAKC,iBAAiB,UAAWC,IAAKA,EAAEC,gBAAgB,IAE7DV,EAAKM,SAASE,iBAAiB,SAE9B,WACG,MAAMP,EAAaU,OAAOX,EAAKC,WAAWW,OACpCR,EAAYO,OAAOX,EAAKI,UAAUQ,OAClCP,EAASM,OAAOX,EAAKK,OAAOO,OAElC,IAAK,IAAIC,EAAQ,EAAGA,EAAQR,EAAQQ,IAMrBC,EALJD,EAAO,EAKOE,EALJd,EAAaG,EAAUS,EAiBhD,SAAuBG,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,IAAYC,aAAa,KAC9BC,KAAKC,SAAW,GAGtCJ,EAAQ,C,SAAEH,E,MAAUC,IAIpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAG1BA,I,CAvBHO,CAAcV,EAAUC,GACvBU,MAAK,EAACT,SAAEA,EAAQC,MAAEA,MACjBS,EAAA5B,GAAS6B,OAAOC,QAAQ,qBAAqBZ,QAAeC,MAAU,IAEvEY,OAAM,EAACb,SAAEA,EAAQC,MAAEA,MAClBS,EAAA5B,GAAS6B,OAAOG,QAAQ,oBAAoBd,QAAeC,MAAU,IANxE,IAAkBH,EAAUC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  firstDelay:document.querySelector(\"input[name='delay']\"),\n  stepDelay:document.querySelector(\"input[name='step']\"),\n  amount:document.querySelector(\"input[name='amount']\"),\n  btnStart:document.querySelector('button'),\n  form:document.querySelector('.form'),\n}\n\nrefs.form.addEventListener(\"submit\", (e)=>{e.preventDefault()})\n\nrefs.btnStart.addEventListener('click', start);\n\n function start (){\n    const firstDelay = Number(refs.firstDelay.value);  \n    const stepDelay = Number(refs.stepDelay.value);\n    const amount = Number(refs.amount.value);\n\n    for (let index = 0; index < amount; index ++ ) {\n      interval(index +1, firstDelay + stepDelay*index);\n    }\n\n }  \n\n function interval(position, delay){\n  createPromise(position, delay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n  });\n\n }\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) =>  setInterval( () => {\n    const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n    resolve({ position, delay });\n\n  } else {\n    // Reject    \n    reject({ position, delay });\n\n  }\n  }, delay))\n\n}\n\n\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","firstDelay","document","querySelector","stepDelay","amount","btnStart","form","addEventListener","e","preventDefault","Number","value","index","position1","delay1","position","delay","Promise","resolve","reject","setInterval","Math","random","$47d4ff9957288465$var$createPromise","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.0520a9b1.js.map"}