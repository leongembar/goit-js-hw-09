{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,WAAWC,SAASC,cAAc,uBAClCC,UAAUF,SAASC,cAAc,sBACjCE,OAAOH,SAASC,cAAc,wBAC9BG,SAASJ,SAASC,cAAc,UAChCI,KAAKL,SAASC,cAAc,UAI9BH,EAAKO,KAAKC,iBAAiB,UAAU,SAACC,GAAKA,EAAEC,gB,IAE7CV,EAAKM,SAASE,iBAAiB,SAE9B,WAKG,IAJA,IAAMP,EAAaU,OAAOX,EAAKC,WAAWW,OACpCR,EAAYO,OAAOX,EAAKI,UAAUQ,OAClCP,EAASM,OAAOX,EAAKK,OAAOO,OAEzBC,EAAQ,EAAGA,EAAQR,EAAQQ,IAMrBC,EALJD,EAAO,EAKOE,EALJd,EAAaG,EAAUS,EAiBhD,SAAuBC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,G,OAAYC,aAAa,WAC9BC,KAAKC,SAAW,GAGtCJ,EAAQ,CAAEH,WAAUC,UAIpBG,EAAO,CAAEJ,WAAUC,S,GAGlBA,E,IAvBHO,CAAcR,EAAUC,GACvBQ,MAAK,SAAAC,G,IAAGC,EAAQD,EAARV,SAAUY,EAAKF,EAALT,MACjBY,EAAA7B,GAAS8B,OAAOC,QAAQ,qBAAoCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAEnEK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARV,SAAUY,EAAKF,EAALT,MAClBY,EAAA7B,GAAS8B,OAAOI,QAAQ,oBAAmCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IANpE,IAAkBZ,EAAUC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  firstDelay:document.querySelector(\"input[name='delay']\"),\n  stepDelay:document.querySelector(\"input[name='step']\"),\n  amount:document.querySelector(\"input[name='amount']\"),\n  btnStart:document.querySelector('button'),\n  form:document.querySelector('.form'),\n}\n\n\nrefs.form.addEventListener(\"submit\", (e)=>{e.preventDefault()})\n\nrefs.btnStart.addEventListener('click', start);\n\n function start (){\n    const firstDelay = Number(refs.firstDelay.value);  \n    const stepDelay = Number(refs.stepDelay.value);\n    const amount = Number(refs.amount.value);\n\n    for (let index = 0; index < amount; index ++ ) {\n      interval(index +1, firstDelay + stepDelay*index);\n    }\n\n }  \n\n function interval(position, delay){\n  createPromise(position, delay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n  });\n\n }\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) =>  setInterval( () => {\n    const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n    resolve({ position, delay });\n\n  } else {\n    // Reject    \n    reject({ position, delay });\n\n  }\n  }, delay))\n\n}\n\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","firstDelay","document","querySelector","stepDelay","amount","btnStart","form","addEventListener","e","preventDefault","Number","value","index","position","delay","Promise","resolve","reject","setInterval","Math","random","$ce04d3a99e08e73b$var$createPromise","then","param","_$position","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.4b75ac53.js.map"}